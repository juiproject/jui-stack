/* FilterQueryParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. FilterQueryParser.java */
package com.effacy.jui.filter.parser;

import com.effacy.jui.filter.builder.ExpressionBuildException;
import com.effacy.jui.filter.builder.FieldMapper;
import com.effacy.jui.filter.builder.IExpressionBuildable;
import com.effacy.jui.filter.builder.IExpressionBuilder;
import com.effacy.jui.filter.builder.MappedExpresionBuilder;
import com.effacy.jui.filter.parser.BaseNode.ValueType;

public class FilterQueryParser/*@bgen(jjtree)*/implements FilterQueryParserTreeConstants, FilterQueryParserConstants {/*@bgen(jjtree)*/
  protected JJTFilterQueryParserState jjtree = new JJTFilterQueryParserState();
    public static ParsedExpression parse(String content) throws FilterQueryParserException {
        try {
            return new ParsedExpression (new FilterQueryParser(content).parse());
        } catch (java.lang.Throwable e) {
            throw new FilterQueryParserException(e.getMessage ());
        }
    }

    public static class ParsedExpression implements IExpressionBuildable<String> {
        protected AstRoot root;
        ParsedExpression(AstRoot root) {
            this.root = root;
        }
        public <T> T build(IExpressionBuilder<T,String> builder) throws ExpressionBuildException {
            return root.build(builder);
        }
        public <T,F> T build(IExpressionBuilder<T,F> builder, FieldMapper<String,F> mapper) throws ExpressionBuildException {
            return build(new MappedExpresionBuilder<T,String,F>(builder, mapper));
        }
        public void print() {
            root.print(0);
        }
    }

    public static class FilterQueryParserException extends Exception {
        public FilterQueryParserException(String message) {
            super (message);
        }
    }

/** Main production. */
  final public AstRoot parse() throws ParseException {/*@bgen(jjtree) Root */
  AstRoot jjtn000 = new AstRoot(this, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OrExpression();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
return jjtn000;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new RuntimeException("Missing return statement in function");
}

  final public void OrExpression() throws ParseException {
    AndExpression();
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(OR);
AstOrExpression jjtn001 = new AstOrExpression(this, JJTOREXPRESSION);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        AndExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
      }
    }
}

  final public void AndExpression() throws ParseException {
    NotExpression();
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(AND);
AstAndExpression jjtn001 = new AstAndExpression(this, JJTANDEXPRESSION);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        NotExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
    }
}

  final public void NotExpression() throws ParseException {
    if (jj_2_3(2)) {
      jj_consume_token(NOT);
AstNotExpression jjtn001 = new AstNotExpression(this, JJTNOTEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        NotExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
      }
    } else if (jj_2_4(2)) {
      PrimaryExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void PrimaryExpression() throws ParseException {
    if (jj_2_5(2)) {
      ComparisonExpression();
    } else if (jj_2_6(2)) {
      jj_consume_token(LPAREN);
      OrExpression();
      jj_consume_token(RPAREN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void ComparisonExpression() throws ParseException {
    Field();
    if (jj_2_7(2)) {
      jj_consume_token(EQ);
AstEquals jjtn001 = new AstEquals(this, JJTEQUALS);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        SimpleValue();
      } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
      }
    } else if (jj_2_8(2)) {
      jj_consume_token(NEQ);
AstNotEquals jjtn002 = new AstNotEquals(this, JJTNOTEQUALS);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
      try {
        SimpleValue();
      } catch (Throwable jjte002) {
if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
      }
    } else if (jj_2_9(2)) {
      jj_consume_token(GT);
AstGreaterThan jjtn003 = new AstGreaterThan(this, JJTGREATERTHAN);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
      try {
        SimpleValue();
      } catch (Throwable jjte003) {
if (jjtc003) {
               jjtree.clearNodeScope(jjtn003);
               jjtc003 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte003 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte003;}
             }
             if (jjte003 instanceof ParseException) {
               {if (true) throw (ParseException)jjte003;}
             }
             {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
               jjtree.closeNodeScope(jjtn003,  2);
             }
      }
    } else if (jj_2_10(2)) {
      jj_consume_token(GTE);
AstGreaterThanOrEqual jjtn004 = new AstGreaterThanOrEqual(this, JJTGREATERTHANOREQUAL);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
      try {
        SimpleValue();
      } catch (Throwable jjte004) {
if (jjtc004) {
                jjtree.clearNodeScope(jjtn004);
                jjtc004 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte004 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte004;}
              }
              if (jjte004 instanceof ParseException) {
                {if (true) throw (ParseException)jjte004;}
              }
              {if (true) throw (Error)jjte004;}
      } finally {
if (jjtc004) {
                jjtree.closeNodeScope(jjtn004,  2);
              }
      }
    } else if (jj_2_11(2)) {
      jj_consume_token(LT);
AstLessThan jjtn005 = new AstLessThan(this, JJTLESSTHAN);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
      try {
        SimpleValue();
      } catch (Throwable jjte005) {
if (jjtc005) {
               jjtree.clearNodeScope(jjtn005);
               jjtc005 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte005 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte005;}
             }
             if (jjte005 instanceof ParseException) {
               {if (true) throw (ParseException)jjte005;}
             }
             {if (true) throw (Error)jjte005;}
      } finally {
if (jjtc005) {
               jjtree.closeNodeScope(jjtn005,  2);
             }
      }
    } else if (jj_2_12(2)) {
      jj_consume_token(LTE);
AstLessThanOrEqual jjtn006 = new AstLessThanOrEqual(this, JJTLESSTHANOREQUAL);
              boolean jjtc006 = true;
              jjtree.openNodeScope(jjtn006);
      try {
        SimpleValue();
      } catch (Throwable jjte006) {
if (jjtc006) {
                jjtree.clearNodeScope(jjtn006);
                jjtc006 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte006 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte006;}
              }
              if (jjte006 instanceof ParseException) {
                {if (true) throw (ParseException)jjte006;}
              }
              {if (true) throw (Error)jjte006;}
      } finally {
if (jjtc006) {
                jjtree.closeNodeScope(jjtn006,  2);
              }
      }
    } else if (jj_2_13(2)) {
      jj_consume_token(IN);
AstIn jjtn007 = new AstIn(this, JJTIN);
             boolean jjtc007 = true;
             jjtree.openNodeScope(jjtn007);
      try {
        ListValue();
      } catch (Throwable jjte007) {
if (jjtc007) {
               jjtree.clearNodeScope(jjtn007);
               jjtc007 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte007 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte007;}
             }
             if (jjte007 instanceof ParseException) {
               {if (true) throw (ParseException)jjte007;}
             }
             {if (true) throw (Error)jjte007;}
      } finally {
if (jjtc007) {
               jjtree.closeNodeScope(jjtn007,  2);
             }
      }
    } else if (jj_2_14(2)) {
      jj_consume_token(NOT_IN);
AstNotIn jjtn008 = new AstNotIn(this, JJTNOTIN);
                 boolean jjtc008 = true;
                 jjtree.openNodeScope(jjtn008);
      try {
        ListValue();
      } catch (Throwable jjte008) {
if (jjtc008) {
                   jjtree.clearNodeScope(jjtn008);
                   jjtc008 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte008 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte008;}
                 }
                 if (jjte008 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte008;}
                 }
                 {if (true) throw (Error)jjte008;}
      } finally {
if (jjtc008) {
                   jjtree.closeNodeScope(jjtn008,  2);
                 }
      }
    } else if (jj_2_15(2)) {
      jj_consume_token(CONTAINS);
AstContains jjtn009 = new AstContains(this, JJTCONTAINS);
                   boolean jjtc009 = true;
                   jjtree.openNodeScope(jjtn009);
      try {
        SimpleValue();
      } catch (Throwable jjte009) {
if (jjtc009) {
                     jjtree.clearNodeScope(jjtn009);
                     jjtc009 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte009 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte009;}
                   }
                   if (jjte009 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte009;}
                   }
                   {if (true) throw (Error)jjte009;}
      } finally {
if (jjtc009) {
                     jjtree.closeNodeScope(jjtn009,  2);
                   }
      }
    } else if (jj_2_16(2)) {
      jj_consume_token(STARTS_WITH);
AstStartsWith jjtn010 = new AstStartsWith(this, JJTSTARTSWITH);
                      boolean jjtc010 = true;
                      jjtree.openNodeScope(jjtn010);
      try {
        SimpleValue();
      } catch (Throwable jjte010) {
if (jjtc010) {
                        jjtree.clearNodeScope(jjtn010);
                        jjtc010 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte010 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte010;}
                      }
                      if (jjte010 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte010;}
                      }
                      {if (true) throw (Error)jjte010;}
      } finally {
if (jjtc010) {
                        jjtree.closeNodeScope(jjtn010,  2);
                      }
      }
    } else if (jj_2_17(2)) {
      jj_consume_token(ENDS_WITH);
AstEndsWith jjtn011 = new AstEndsWith(this, JJTENDSWITH);
                    boolean jjtc011 = true;
                    jjtree.openNodeScope(jjtn011);
      try {
        SimpleValue();
      } catch (Throwable jjte011) {
if (jjtc011) {
                      jjtree.clearNodeScope(jjtn011);
                      jjtc011 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte011 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte011;}
                    }
                    if (jjte011 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte011;}
                    }
                    {if (true) throw (Error)jjte011;}
      } finally {
if (jjtc011) {
                      jjtree.closeNodeScope(jjtn011,  2);
                    }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Field() throws ParseException {/*@bgen(jjtree) Field */
                        AstField jjtn000 = new AstField(this, JJTFIELD);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setImage(t.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void SimpleValue() throws ParseException {/*@bgen(jjtree) Value */
                              AstValue jjtn000 = new AstValue(this, JJTVALUE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_18(2)) {
        t = jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setImage(t.image.substring(1, t.image.length() - 1)); jjtn000.setValueType(ValueType.STRING);
      } else if (jj_2_19(2)) {
        t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.setImage(t.image); jjtn000.setValueType(ValueType.LITERAL);
      } else if (jj_2_20(2)) {
        t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setImage(t.image); jjtn000.setValueType(ValueType.INTEGER);
      } else if (jj_2_21(2)) {
        t = jj_consume_token(DECIMAL);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setImage(t.image); jjtn000.setValueType(ValueType.DECIMAL);
      } else if (jj_2_22(2)) {
        t = jj_consume_token(TRUE);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setImage("true"); jjtn000.setValueType(ValueType.BOOLEAN);
      } else if (jj_2_23(2)) {
        t = jj_consume_token(FALSE);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.setImage("false"); jjtn000.setValueType(ValueType.BOOLEAN);
      } else if (jj_2_24(2)) {
        t = jj_consume_token(NULL);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setImage("null"); jjtn000.setValueType(ValueType.NULL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void ListValue() throws ParseException {/*@bgen(jjtree) List */
  AstList jjtn000 = new AstList(this, JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      SimpleValue();
      label_3:
      while (true) {
        if (jj_2_25(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        SimpleValue();
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_SimpleValue_159_5_9()) return true;
    return false;
  }

  private boolean jj_3R_ComparisonExpression_133_3_7()
 {
    if (jj_3R_Field_151_3_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_OrExpression_105_3_8()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_127_5_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_ComparisonExpression_133_3_7()) return true;
    return false;
  }

  private boolean jj_3R_ListValue_170_5_10()
 {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_PrimaryExpression_127_5_6()) return true;
    return false;
  }

  private boolean jj_3R_NotExpression_121_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_NotExpression_121_3_5()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_NotExpression_121_3_5()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_SimpleValue_159_5_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_AndExpression_113_3_4()
 {
    if (jj_3R_NotExpression_121_3_5()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_AndExpression_113_3_4()) return true;
    return false;
  }

  private boolean jj_3R_OrExpression_105_3_8()
 {
    if (jj_3R_AndExpression_113_3_4()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_SimpleValue_159_5_9()) return true;
    return false;
  }

  private boolean jj_3R_Field_151_3_11()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(ENDS_WITH)) return true;
    if (jj_3R_SimpleValue_159_5_9()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(STARTS_WITH)) return true;
    if (jj_3R_SimpleValue_159_5_9()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(CONTAINS)) return true;
    if (jj_3R_SimpleValue_159_5_9()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(NOT_IN)) return true;
    if (jj_3R_ListValue_170_5_10()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_ListValue_170_5_10()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(LTE)) return true;
    if (jj_3R_SimpleValue_159_5_9()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_SimpleValue_159_5_9()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(GTE)) return true;
    if (jj_3R_SimpleValue_159_5_9()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_SimpleValue_159_5_9()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(NEQ)) return true;
    if (jj_3R_SimpleValue_159_5_9()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FilterQueryParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[25];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor. */
  public FilterQueryParser(Provider stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new FilterQueryParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FilterQueryParser(String dsl) throws ParseException, TokenMgrException {
	   this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
	  ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new FilterQueryParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FilterQueryParser(FilterQueryParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FilterQueryParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.RuntimeException {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[31];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 31; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : FilterQueryParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 25; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
