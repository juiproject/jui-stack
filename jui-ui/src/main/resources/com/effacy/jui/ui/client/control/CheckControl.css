.component {
    --jui-checkctl-text: var(--jui-ctl-text);
    --jui-checkctl-description: var(--jui-ctl-text);
    --jui-checkctl-labelgap: 0.75em;
}

/**************************************
* Layout (structure).
*/

.component .inner {
	display: flex;
	flex-direction: column;
	gap: var(--jui-checkctl-labelgap);
	color: var(--jui-checkctl-text);
}

.component .inner .item {
	display: flex;
	flex-direction: row;
    align-items: flex-start;
}

.component .inner .item.reverse {
	flex-direction: row-reverse;
}

.component .inner .item span.spacer {
	display: inline-block;
	width: var(--jui-checkctl-labelgap);
}

.component .inner .item.expand span.spacer {
	flex-grow: 1;
}

/**************************************
* Toggle (slider) variation.
*/

.component .inner .item.toggle label {
    color: var(--jui-checkctl-text);
}

.component .inner .item.toggle label.toggle {
	margin: 0;
	display: block;
	position: relative;
	width: 38px;
	height: 20px;
	background-color: var(--jui-ctl-bg-offset);
	border-radius: 20px;
	transition: all 300ms ease;
	cursor: pointer;
}

.component.active .inner .item.toggle label.toggle {
	display: block;
	position: relative;
	width: 38px;
	height: 20px;
	border-radius: 20px;
	transition: all 300ms ease;
	cursor: pointer;
	background-color: var(--jui-ctl-active);
}

.component .inner .item.toggle label.toggle::after {
	content: ' ';
	position: absolute;
	top: 4px;
	left: 4px;
	height: 12px;
	width: 12px;
	background-color: var(--jui-ctl-bg);
	border-radius: 50%;
	box-shadow:  0px 0px 3px inset var(--jui-ctl-action);
	transition: all 300ms ease;
}

.component.active .inner .item.toggle label.toggle::after {
	left: 22px;
	background-color: #fff;
	box-shadow: none;
}

.component .inner .item label.toggle input {
	cursor: pointer;
    top: -1px;
}

.component .inner .item.toggle label.toggle input {
	position: absolute;
	top: 0px;
	left: 0px;
	opacity: 0;
	width: 1px;
	height: 1px;
}

/**************************************
* Label and description.
*/

.component .inner .item label {
	user-select: none;
	cursor: pointer;
    display: flex;
    flex-direction: column;
	font-weight: 500;
}

.component.disabled .inner .item label {
	color: var(--jui-ctl-text-disabled) !important;
    opacity: var(--jui-ctl-opacity-disabled);
	cursor: not-allowed;
}

.component .inner .item.bold > span label {
	font-weight: 600;
}

.component .inner .item label > span.description {
    font-weight: 400;
    font-size: 0.95em;
    color: var(--jui-checkctl-description);
}

.component.invalid .inner input {
	border-color: var(--jui-ctl-focus);
    box-shadow: 0 0 0 1px var(--jui-ctl-focus-offset);
}

.component.disabled .inner input {
	color: var(--jui-ctl-text-disabled);
	cursor: not-allowed;
}

.component.read_only .inner input {
	background: var(--jui-ctl-bg-disabled);
	color: var(--jui-ctl-text-disabled);
	cursor: not-allowed;
}

.component input {
	background: inherit;
	color: inherit;
	outline: none;
	border: none;
	width: 1em;
	height: 1em;
    position: relative;
    font-size: 1em;
}

.component input:focus {
	box-shadow: 0 0 0 2px var(--jui-ctl-focus-offset);
}

.component.focus .item.toggle label.toggle {
	border-color: var(--jui-ctl-focus);
    box-shadow: 0 0 0 2px var(--jui-ctl-focus-offset);
}

.component.invalid .inner input:focus {
	box-shadow: 0 0 3px 1px var(--jui-ctl-err-focus-offset);
}

/**************************************
* Waiting state
*/

.component.waiting .inner input {
	animation: eff-waiting-bg 1s infinite;
	border: transparent;
}

.component.waiting .inner * {
	visibility: hidden;
}