/*******************************************************************************
 * Copyright 2024 Jeremy Buckley
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * <p>
 * <a href= "http://www.apache.org/licenses/LICENSE-2.0">Apache License v2</a>
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package com.effacy.jui.json.client;

import org.gwtproject.json.client.JSONException;
import org.gwtproject.json.client.JSONValue;

import com.effacy.jui.json.annotation.JsonSerializable;
import com.effacy.jui.json.rebind.SerializationGenerator;

/**
 * Implementations of this interface are used to perform serialization
 * activities on specific object types. Each type is associated to a serializer
 * for that type. These are typically generated by the GWT compiler through the
 * {@link SerializationGenerator} when it encounters classes that are annotated
 * by {@link JsonSerializable}.
 * 
 * @author Jeremy Buckley
 */
public interface ISerializer {

    /**
     * Serializes an object to a JSON value.
     * 
     * @param pojo
     *            the object to serialize.
     * @param contributor
     *            an optional contributor.
     * @return The serialized object.
     */
    public JSONValue serializeToJson(Object pojo, IContributor<Object> contributor);


    /**
     * Converts a JSON value to a object whose fully specified class name
     * matches that specified.
     * 
     * @param jsonValue
     *            the value to convert.
     * @param className
     *            the name of the class to attempt to convert it to.
     * @return The converted value.
     * @throws JSONException
     *             On error.
     */
    public Object serializeFromJson(JSONValue jsonValue) throws JSONException;

}
