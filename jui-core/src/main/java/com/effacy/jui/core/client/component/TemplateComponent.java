/*******************************************************************************
 * Copyright 2024 Jeremy Buckley
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * <p>
 * <a href= "http://www.apache.org/licenses/LICENSE-2.0">Apache License v2</a>
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package com.effacy.jui.core.client.component;

import java.util.Optional;

import com.effacy.jui.core.client.dom.DomSupport;
import com.effacy.jui.core.client.dom.IDomSelector;
import com.effacy.jui.core.client.dom.IUIEventHandler;
import com.effacy.jui.core.client.dom.renderer.IDataRenderer;
import com.effacy.jui.core.client.dom.renderer.template.ITemplateBuilder;

/**
 * Component that can have its content updated and where the content is
 * generated by a template.
 * <p>
 * Rendering during update will be directly into the root element. As such, an
 * empty renderer is registered against the component itself (so none of the
 * build methods will operate).
 *
 * @author Jeremy Buckley
 */
public abstract class TemplateComponent<D, C extends Component.Config> extends Component<C> {

    /**
     * The data renderer for presenting the update.
     */
    private IDataRenderer<D> presenter;

    /**
     * Construct with a given cache key.
     * 
     * @param config
     *                 the component configuration.
     * @param cacheKey
     *                 the cache key (if {@code null} then the canoncial class name
     *                 is used).
     */
    protected TemplateComponent(C config, String cacheKey) {
        super (config, IDataRenderer.empty ());
        presenter = ITemplateBuilder.<D>renderer (cacheKey, root -> {
            ITemplateBuilder<D> template = template ();
            template.build (root);
        });
    }

    /**
     * Construct with the default cache key (the class name).
     * 
     * @param config
     *               the component configuration.
     */
    protected TemplateComponent(C config) {
        this (config, null);
    }

    /**
     * Configures the template. This adds builders to the builder items (usually
     * configured).
     */
    protected abstract ITemplateBuilder<D> template();

    /**
     * Store data if {@link #update(Object)} is called prior to rendering.
     */
    private Optional<D> preRenderData = null;

    /**
     * Updates the component using the passed data to configure the template from.
     * 
     * @param data
     *             the data to configure.
     */
    public void update(D data) {
        if (!isRendered ()) {
            preRenderData = Optional.ofNullable (data);
            return;
        }
        preRenderData = null;
        DomSupport.removeAllChildren (getRoot ());
        IUIEventHandler handler = presenter.render (getRoot (), data);
        registerEventHandler (handler, "update");
        if (handler instanceof IDomSelector)
            onAfterUpdate (data, (IDomSelector) handler);
        else
            onAfterUpdate (data, null);
    }

    /**
     * Invoked after a successful update.
     * 
     * @param data
     *                 the data that was passed.
     * @param selector
     *                 the selector for mining for declared elements.
     */
    protected void onAfterUpdate(D data, IDomSelector selector) {
        // Nothing.
    }

    /**
     * {@inheritDoc}
     *
     * @see com.effacy.jui.core.client.component.Component#onAfterRender()
     */
    @Override
    protected void onAfterRender() {
        super.onAfterRender ();

        if (preRenderData != null) {
            if (preRenderData.isEmpty ())
                update (null);
            else
                update (preRenderData.get ());
        }
    }
}
